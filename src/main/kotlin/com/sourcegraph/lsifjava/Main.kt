/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.sourcegraph.lsifjava

import com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver
import com.github.javaparser.symbolsolver.JavaSymbolSolver
import com.github.javaparser.StaticJavaParser
import com.github.javaparser.ast.CompilationUnit
import com.github.javaparser.ast.PackageDeclaration
import com.github.javaparser.ast.visitor.ModifierVisitor

import java.nio.file.Path
import java.io.PrintWriter
import java.io.File

fun main(args: Array<String>) {
    val arguments = parse(args)

    val writer = createWriter(arguments)
    val emitter = Emitter(writer)

    val start = System.nanoTime()

    var stats = Stats(0, 0)

    try {
        stats = index(arguments, emitter, stats)
    } finally {
        writer.flush()
        writer.close()
    }

    displayStats(emitter, start, stats)
}

private fun createWriter(args: Arguments): PrintWriter {
    return PrintWriter(File(args.outFile))
}

private fun displayStats(emitter: Emitter, start: Long, stats: Stats) {
    println("${stats.numFiles} file(s), ${stats.numDefs} def(s), ${emitter.numElements()} element(s)")
    println("Processed in ${(System.nanoTime() - start) / 1e6}")
}

enum class BuildTool {
    Maven, Gradle
}

private fun determineBuildTool(projectRoot: String): BuildTool? {
    if (Path.of(projectRoot, "build.gradle").toFile().exists()) {
        return BuildTool.Gradle
    } else if (Path.of(projectRoot, "pom.xml").toFile().exists()) {
        return BuildTool.Maven
    }
    println("couldn't determine build tool from path ${projectRoot}")
    return null
}