/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.sourcegraph.lsifjava

import com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver
import com.github.javaparser.symbolsolver.JavaSymbolSolver
import com.github.javaparser.StaticJavaParser
import com.github.javaparser.ast.CompilationUnit
import com.github.javaparser.ast.PackageDeclaration
import com.github.javaparser.ast.visitor.ModifierVisitor

import java.nio.file.Path

fun main(args: Array<String>) {
    val args = parse(args)
    println(args)

    val buildTool = determineBuildTool(args.projectRoot)

    val typeSolver = CombinedTypeSolver()
    typeSolver.add(ReflectionTypeSolver())

    val symbolSolver = JavaSymbolSolver(typeSolver)
    StaticJavaParser.getConfiguration().setSymbolResolver(symbolSolver)


    val compUnit = StaticJavaParser.parse("""
    package sample.text.ru;
    class Main {
        public static void main(String[] args) {
            System.out.println(args[0]);
        }

        boolean test() {
            return true;
        }
    }
    """)



    compUnit.findAll(PackageDeclaration::class.java).forEach {
        println(it)
    };
}

enum class BuildTool {
    Maven, Gradle
}

private fun determineBuildTool(projectRoot: String): BuildTool? {
    if (Path.of(projectRoot, "build.gradle").toFile().exists()) {
        return BuildTool.Gradle
    } else if (Path.of(projectRoot, "pom.xml").toFile().exists()) {
        return BuildTool.Maven
    }
    println("couldn't determine build tool from path ${projectRoot}")
    return null
}